/*
 * Gradle build file for ippo assignment 2 submission by Martin Starkov
 *
 * 'gradle run'     - build and run the code
 * 'gradle jar'     - create a jar file for distribution
 *
 */

apply plugin: 'java'

/*********************************************************************************************
* dependencies
********************************************************************************************/

// this specifies the JavaFx libraries that the application requires, and the
// online repository where they are found. gradle will automatically download
// these as required, so you do not need to manually download any library code.

repositories { mavenCentral() }

def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
	platform = 'win'
} else if (currentOS.isLinux()) {
	platform = 'linux'
} else if (currentOS.isMacOsX()) {
	platform = 'mac'
}

dependencies {
	compile "org.openjfx:javafx-base:11:${platform}"
	compile "org.openjfx:javafx-graphics:11:${platform}"
	compile "org.openjfx:javafx-controls:11:${platform}"
	compile "org.openjfx:javafx-fxml:11:${platform}"
	compile "org.json:json:20090211"
	compile group: 'commons-io', name: 'commons-io', version: '2.6'
	compile 'com.google.guava:guava:21.0'

}

/*********************************************************************************************
 * execution
 ********************************************************************************************/

// this specifies how to run the program from either the jar, or from IntelliJ
// if you change the name of the main class, you need to change this
// otherwise, you probably don't want to change anything here

def mainClassName='Main'

task run(type: JavaExec) {
    group = "ippo"
    description = "run assignment 2"
    classpath sourceSets.main.runtimeClasspath
    main = "${mainClassName}"
}

jar {
  	group = "ippo"
    description = "create runnable jar file for assignment 2"
    manifest { attributes 'Main-Class': "${mainClassName}" }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}
